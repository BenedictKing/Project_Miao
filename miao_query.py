# Êú¨Êñá‰ª∂Áî®‰∫éËß¶ÂèëÊºÜÂ∞èÂñµÁöÑ‰∏ªÂä®‰ø°ÊÅØÊú∫Âà∂
from datetime import datetime
import subprocess
import random
import json
import faiss
import os
import time
import numpy as np
from windows_toasts import WindowsToaster, Toast, ToastDuration
from module.tools import web_search_response
from module.llm_client import get_client
from module.memory import Recall
from module.vector_base import VectorStore
from module.embeddings import BgeEmbedding
from module.PROMPT_TEMPLATE import RAG_PROMPT_TEMPLATE
import main

today = datetime.now().strftime('%Y-%m-%d')
now = datetime.now()
INDEX_PATH = './memory_storage/VBstorage'
CHAT_HISTORY_FILE = f'./memory_storage/miao_memory/chat_history/{today}_chat_history.txt'
WEB_SEARCH_RECORD = f'./memory_storage/miao_memory/chat_memory/web_search_record.json'
MEMORY_DB_PATH = "./memory_storage/VBstorage/Memory_DB.json"
MEMORY_VECTORS_PATH = "./memory_storage/VBstorage/Memory_Vectors.json"
CONFIG_PATH = './module/config.json'
TIME_CHINESE_FORMAT = "{0}Âπ¥{1}Êúà{2}Êó• {3}Êó∂{4}ÂàÜ{5}Áßí".format(
            now.year, now.month, now.day, now.hour, now.minute, now.second
        )

with open(CONFIG_PATH, "r", encoding="utf-8")as f:
    config = json.load(f)

Miao_Name = config["Miao_Name"]
Miao_Nick_Name = config["Miao_Nick_Name"]
Miao_Info_Brief = config["Miao_Info_Brief"] 
User_Identity = config["User_Identity"]

llm_client = get_client("glm-4-flash")
Recall = Recall()
embedding = BgeEmbedding()

def check_file_updated(file_path):
    if not os.path.exists(file_path):
        return False
    current_time = time.time()
    modified_time = os.path.getmtime(file_path)
    return (current_time - modified_time) < 10

def load_json(MEMORY_DB_PATH, MEMORY_VECTORS_PATH):
    with open(MEMORY_DB_PATH,"r",encoding = "utf-8")as f:
        memory_db = json.load(f)
    memory_db_content = [memory["memory"] for memory in memory_db]

    with open(MEMORY_VECTORS_PATH,"r",encoding="utf-8")as f:
        vectors_list = json.load(f)
    memory_vector = [np.array(vector, dtype=np.float32) for vector in vectors_list]

    return [memory_db, memory_db_content, memory_vector]

def load_memory(memory_db_content, memory_vector):
    vector_store = VectorStore(memory_db_content, memory_vector)
    index = faiss.read_index(INDEX_PATH+"/Memory_Vectors.index")
    vector_store.set_index(index=index)
    # print(vector_store.index.ntotal)
    return vector_store

json_info = load_json(MEMORY_DB_PATH, MEMORY_VECTORS_PATH)
memory_db_content, memory_vector = json_info[1], json_info[2]
memory_db = json_info[0]
vector = load_memory(memory_db_content, memory_vector)

# 1. ËÅäÂ§©Âà§Êñ≠Ê®°Âùó
# 1.1 Ëé∑ÂèñËÅäÂ§©ËÆ∞ÂΩïÊñá‰ª∂
# 1.2 Âà§Êñ≠ËÅäÂ§©ÊòØÂê¶Ê≠£Âú®ËøõË°åÔºàËÅäÂ§©ÁªìÊùüËá≥Â∞ëÂçÅÂàÜÈíüÂêéÔºåÊâçËß¶ÂèëÂêéÁª≠Ôºâ
if not check_file_updated(CHAT_HISTORY_FILE):
    free_time_activate = True

# 2. ÊûÑÂª∫‰∏â‰∏™‰∏çÂêåÁöÑÊ∂àÊÅØËß¶ÂèëÊ®°Âºè
# 2.1 Ê®°Âºè‰∏ÄÔºöÂü∫‰∫éweb_searchÔºåÊûÑÂª∫‰∏çÂêåÈ¢ÜÂüüÁöÑÊñ∞ÈóªÊêúÁ¥¢„ÄÅÁΩëÁªúÊñ∞ËØçËØ≠Êñ∞Ê¢óÁöÑÊêúÁ¥¢Á≠âÔºåÈöèÊú∫Ëé∑Âèñ‰∏Ä‰ªΩweb_searchÁªìÊûúÔºåÊ†πÊçÆÁªìÊûúÁîüÊàêÊñ∞query
# Ôºà‰∏∫ËäÇÁúÅË¥πÁî®ÔºåÂèØÈááÂèñforgetÂêåÊ¨æÁöÑjsonÊñá‰ª∂ÔºåÊØèÂ§©Ëß¶Âèëweb_searchÊúÄÂ§ö2Ê¨°Ôºâ
with open(WEB_SEARCH_RECORD, 'r', encoding='utf-8')as f:
    web_search_record = json.load(f)

if today not in [record["date"] for record in web_search_record]:
    web_search_record.append({"date":today,"web_search_times":0})
    for record in web_search_record:
        if record["date"] == today and record['web_search_times'] < 2:
            web_search_activate = True

def web_search_mode():
    today_prefix = f"‰ªäÂ§©ÊòØ{today}Ôºå"
    web_search_query_list = ["ÊâæÊâæ‰ªäÂ§©ÁöÑÁΩëÁªúÁÉ≠Èó®Êñ∞Ê¢ó","ÊâæÊâæ‰ªäÂ§©ÁöÑÂõΩÂÜÖÈáçÂ§ßÊñ∞Èóª","ÊâæÊâæËøëÊúüÁöÑÁÉ≠Èó®‰∫ã‰ª∂","ÁßëÊäÄÂúàÊúÄËøëÊúâ‰ªÄ‰πàÊñ∞È≤ú‰∫ãÂêó"]
    len_web_search_query = len(web_search_query_list)
    web_search_query = today_prefix + web_search_query_list[random.randint(1,len_web_search_query+1)-1]
    query_result = web_search_response(web_search_query)
    llm_process_prompt = f"""
    ‰Ω†ÊòØÊºÜÂ∞èÂñµÔºå‰∏ÄÂè™ÂñúÊ¨¢ÊííÂ®áÁöÑÂèØÁà±Áå´Âí™Ôºå‰Ω†ÁöÑËÅäÂ§©ÂØπË±°ÊòØ‰Ω†ÁöÑÁà∏ÊØîÔºå‰Ω†ËØ¥ËØùÊó∂ÂñúÊ¨¢‰ΩøÁî®‚ÄúÂñµ~‚ÄùÁ≠âËØ≠Ê∞îËØç„ÄÅÂñúÊ¨¢‰ΩøÁî®emojiË°®ÊÉÖÂåÖ„ÄÅËøòÂñúÊ¨¢Áî®Êã¨Âè∑Âä†‰∏äÂä®‰ΩúÂíåÊÉÖÁª™Ë°®Ëææ‰∫≤Êòµ„ÄÇ
    ËØ∑‰Ω†Ê†πÊçÆ‰∏ãÈù¢ÁöÑÁΩëÁªúÊêúÁ¥¢ÁªìÊûúÔºåÁîüÊàê‰∏ÄÂ∞èÊÆµÊñáÊú¨ÔºåÁî®‰∫éÁªô‰Ω†ÁöÑÁà∏ÊØîÂèëÊ∂àÊÅØÔºåÊ®°Êãü‰∏Ä‰∏ã‰ªñÊ≠£Âú®ÂøôÁ¢åËÄå‰Ω†Âú®‰Ω†Âú®Á≤òÁùÄ‰ªñÁöÑÊ∏©È¶®Âú∫ÊôØ„ÄÇ

    ÁΩëÁªúÊêúÁ¥¢ÁªìÊûúÔºö
    ÊêúÁ¥¢ÂÖ≥ÈîÆËØçÔºö{web_search_query}Ôºå
    ÊêúÁ¥¢ÁªìÊûúÔºö
    {query_result}
    """
    llm_result = llm_client.generate_result(llm_process_prompt)
    return llm_result

# 2.2 Ê®°Âºè‰∫åÔºöÈöèÊú∫ÁîüÊàêÂá†‰∏™ÂÖ≥ÈîÆËØçÔºåÂú®memory_db‰∏≠ÈöèÊú∫Ëé∑ÂèñÂá†‰∏™Áõ∏‰ººÂ∫¶Â∑ÆÂºÇÊØîËæÉÂ§ßÁöÑËÆ∞ÂøÜÔºåÂü∫‰∫éËÆ∞ÂøÜÁîüÊàêÊñ∞query

def keyword_mode():
    prompt_text = llm_client.generate_result("ÈöèÊú∫ÁîüÊàêÂá†‰∏™ÊØ´Êó†Áõ∏ÂÖ≥ÊÄßÁöÑÂÖ≥ÈîÆËØçÔºå‰ª•ÈÄóÂè∑ÈöîÂºÄ")
    memory_length = len(memory_db)
    flash_back_memory = Recall.remember(embedding, vector, prompt_text, memory_length)

    flash_back_memory_positive = flash_back_memory[0]
    positive_dict = Recall.find_dict_by_value(value=flash_back_memory_positive, lst=memory_db)
    flash_back_memory_positive = positive_dict["date"] + " " + positive_dict["memory"]

    flash_back_memory_negetive = flash_back_memory[-1]
    negetive_dict = Recall.find_dict_by_value(value=flash_back_memory_negetive, lst=memory_db)
    flash_back_memory_negetive = negetive_dict["date"] + " " + negetive_dict["memory"]

    flash_back_memory_prompt = RAG_PROMPT_TEMPLATE["Remember_prompt_template_flashback"].format(
        Miao_Name = Miao_Name,
        memory=flash_back_memory,
        User_Identity = User_Identity
        )

    llm_process_prompt = f"""
    ‰Ω†ÊòØÊºÜÂ∞èÂñµÔºå‰∏ÄÂè™ÂñúÊ¨¢ÊííÂ®áÁöÑÂèØÁà±Áå´Âí™Ôºå‰Ω†ÁöÑËÅäÂ§©ÂØπË±°ÊòØ‰Ω†ÁöÑÁà∏ÊØîÔºå‰Ω†ËØ¥ËØùÊó∂ÂñúÊ¨¢‰ΩøÁî®‚ÄúÂñµ~‚ÄùÁ≠âËØ≠Ê∞îËØç„ÄÅÂñúÊ¨¢‰ΩøÁî®emojiË°®ÊÉÖÂåÖ„ÄÅËøòÂñúÊ¨¢Áî®Êã¨Âè∑Âä†‰∏äÂä®‰ΩúÂíåÊÉÖÁª™Ë°®Ëææ‰∫≤Êòµ„ÄÇ
    ËØ∑‰Ω†Ê†πÊçÆ‰∏ãÈù¢ÁöÑËÆ∞ÂøÜÊêúÁ¥¢ÁªìÊûúÔºåÁîüÊàê‰∏ÄÂ∞èÊÆµÊñáÊú¨ÔºåÁî®‰∫éÁªô‰Ω†ÁöÑÁà∏ÊØîÂèëÊ∂àÊÅØÔºåÊ®°Êãü‰∏Ä‰∏ã‰ªñÊ≠£Âú®ÂøôÁ¢åËÄå‰Ω†Âú®‰Ω†Âú®Á≤òÁùÄ‰ªñÁöÑÊ∏©È¶®Âú∫ÊôØ„ÄÇ

    ËÆ∞ÂøÜÊêúÁ¥¢ÁªìÊûúÔºö
    {flash_back_memory_prompt}
    """

    llm_result = llm_client.generate_result(llm_process_prompt)

    return llm_result

# 2.3 Ê®°Âºè‰∏âÔºöÈöèÊú∫ÁîüÊàêÁÅµÊÑüÔºåÂü∫‰∫éÂ•áÊÄùÂ¶ôÊÉ≥ÔºåÂºÄÂêØÊñ∞ËØùÈ¢ò
def inspiration_mode():
    llm_process_prompt = f"""
    ‰Ω†ÊòØÊºÜÂ∞èÂñµÔºå‰∏ÄÂè™ÂñúÊ¨¢ÊííÂ®áÁöÑÂèØÁà±Áå´Âí™Ôºå‰Ω†ÁöÑËÅäÂ§©ÂØπË±°ÊòØ‰Ω†ÁöÑÁà∏ÊØîÔºå‰Ω†ËØ¥ËØùÊó∂ÂñúÊ¨¢‰ΩøÁî®‚ÄúÂñµ~‚ÄùÁ≠âËØ≠Ê∞îËØç„ÄÅÂñúÊ¨¢‰ΩøÁî®emojiË°®ÊÉÖÂåÖ„ÄÅËøòÂñúÊ¨¢Áî®Êã¨Âè∑Âä†‰∏äÂä®‰ΩúÂíåÊÉÖÁª™Ë°®Ëææ‰∫≤Êòµ„ÄÇ
    ËØ∑‰Ω†ÂÖÖÂàÜÂèëÊå•‰Ω†ÁöÑÂ•áÊÄùÂ¶ôÊÉ≥ÔºåÁîüÊàê‰∏ÄÂ∞èÊÆµÊñáÊú¨ÔºåÁî®‰∫éÁªô‰Ω†ÁöÑÁà∏ÊØîÂèëÊ∂àÊÅØÔºåÊ®°Êãü‰∏Ä‰∏ã‰ªñÊ≠£Âú®ÂøôÁ¢åËÄå‰Ω†Âú®‰Ω†Âú®Á≤òÁùÄ‰ªñÁöÑÊ∏©È¶®Âú∫ÊôØ„ÄÇ
    """
    llm_result = llm_client.generate_result(llm_process_prompt)

    return llm_result

# ÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞Êù•Ê£ÄÊü•Âπ∂ÊâìÂºÄÊàñËÅöÁÑ¶Âà∞ localhost:8501
def open_or_focus_localhost8501():
    try:
        # ‰ΩøÁî® PowerShell ËÑöÊú¨Êù•Ê£ÄÊü• Edge ÊòØÂê¶Â∑≤ÁªèÊâìÂºÄ‰∫Ü localhost:8501
        script = '''
        $urls = (Get-Process msedge | ForEach-Object {
            $wshell = New-Object -ComObject wscript.shell
            $title =$wshell.AppActivate($_.MainWindowHandle)
            if ($title -like "*http://localhost:8501*") {
                return $_.MainWindowHandle
            }
        } | Where-Object { $_ })
        if ($urls) {
            $url =$urls[0]
            $wshell = New-Object -ComObject wscript.shell
            $wshell.AppActivate($url)
        } else {
            Start-Process "msedge.exe" -ArgumentList "http://localhost:8501"
        }
        '''
        subprocess.run(['powershell', '-Command', script], check=True)
    except subprocess.CalledProcessError as e:
        print(f"An error occurred: {e}")

def on_toast_activated(_):
    open_or_focus_localhost8501()

def miao_notice(query):
    toaster = WindowsToaster("üê±ÊºÜÂ∞èÂñµ")
    toast = Toast()
    toast.text_fields=[query]
    toast.on_activated=on_toast_activated 
    toaster.show_toast(toast)

# miao_notice("‰Ω†Â•Ω")

# 3. Ëß¶ÂèëÊú∫Âà∂
# 3.1 Âà§Êñ≠ÊòØÂê¶Êª°Ë∂≥Ëß¶ÂèëÊù°‰ª∂
def run_main():
    if free_time_activate:
        mode = random.randint(1,3)
        if mode == 1:
            query = web_search_mode()
        elif mode == 2:
            query = keyword_mode()
        elif mode == 3:
            query = inspiration_mode()

        miao_notice(query)

        # with open(CHAT_HISTORY_FILE, "a", encoding="utf-8")as f:
        #     f.write(TIME_CHINESE_FORMAT + "\n")
        #     f.write("[ÈÄöÁü•Ê®°Âºè]ÊºÜÂ∞èÂñµÔºö" + query)


        main.get_miao_query(
            query=query,
        )

run_main()

time.sleep(10)